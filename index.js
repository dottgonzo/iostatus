var _ = require("lodash");
var Promise = require("bluebird");
var bodyParser = require("body-parser");
var pathExists = require("path-exists");
var IO = require("socket.io");
var express = require("express");
var jwt = require("jsonwebtoken");
var redis = require("redis");
var couchjsonconf = require("couchjsonconf");
var machClients = require("./modules/machClients");
var audClients = require("./modules/audClients");
var socketioJwt = require("socketio-jwt");
var rpj = require('request-promise-json');
var mosca = require("mosca");
var app = express();
var server = require('http').Server(app);
var io = IO(server);
if (!pathExists.sync('./conf.json')) {
    throw Error('no configuration founded');
}
var conf = require('./conf.json');
var COUCHDB = new couchjsonconf(conf.couchdb);
var Machines = new machClients(COUCHDB);
var Auditors = new audClients();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
io.use(socketioJwt.authorize({
    secret: conf.secret,
    handshake: true
}));
server.listen(conf.port);
var ascoltatore = {
    type: 'redis',
    redis: redis,
    db: 12,
    port: 6379,
    return_buffers: true,
    host: "localhost"
};
var moscaSettings = {
    port: 1883,
    backend: ascoltatore,
    persistence: {
        factory: mosca.persistence.Redis
    }
};
var mqttserver = new mosca.Server(moscaSettings);
mqttserver.on('ready', setupmqtt);
mqttserver.on('clientConnected', function (client) {
    console.log('client connected', client.id);
});
mqttserver.on('published', function (packet, client) {
    console.log('Published', packet.payload);
});
function setupmqtt() {
    console.log('Mosca server is up and running');
}
app.get('/', function (req, res) {
    res.json({ online: true });
});
function authcouch(user, password, db) {
    return new Promise(function (resolve, reject) {
        rpj.get(COUCHDB.for(user, password, db)).then(function () {
            resolve({ success: true });
        }).catch(function (err) {
            reject({ error: 'wrong credentials' });
        });
    });
}
function authorizesocket(profile) {
    return jwt.sign(profile, conf.secret, { expiresInMinutes: 60 * 5 });
}
app.post('/login', function (req, res) {
    authcouch(req.body.user, req.body.password, req.body.db).then(function () {
        var token = authorizesocket({ user: req.body.user, password: req.body.password, db: req.body.db, serial: req.body.serial });
        res.json({ success: true, token: token });
    }).catch(function (err) {
        res.json(err);
    });
});
app.get('/ip', function (req, res) {
    res.json({ ip: req.connection.remoteAddress });
});
app.get('/sockets', function (req, res) {
    res.json(Machines.sockets());
});
app.get('/machines/:serial/sockets', function (req, res) {
    res.json(Machines.sockets(req.params.serial));
});
app.get('/machines', function (req, res) {
    res.json(Machines.list());
});
app.get('/app/:app/machines', function (req, res) {
});
app.get('/machines/:serial/message/:message', function (req, res) {
    _.map(Machines.ios(req.params.serial), function (socket) {
        socket.emit('message', req.params.message);
    });
    res.json({});
});
app.post('/machines/:serial/message', function (req, res) {
    _.map(Machines.list(req.params.serial), function (socketid) {
        io.to(socketid).emit('message', req.body.data);
    });
});
app.post('/machines/:serial/data', function (req, res) {
    _.map(Machines.list(req.params.serial), function (socketid) {
        io.to(socketid).emit('data', req.body.data);
    });
});
app.post('/machines/:serial/exec', function (req, res) {
    _.map(Machines.list(req.params.serial), function (socketid) {
        io.to(socketid).emit('exec', req.body.data);
    });
});
app.post('/machines/:serial/npm', function (req, res) {
    _.map(Machines.list(req.params.serial), function (socketid) {
        io.to(socketid).emit('npm', req.body.data);
    });
});
app.post('/machines/:serial/task', function (req, res) {
    _.map(Machines.list(req.params.serial), function (socketid) {
        io.to(socketid).emit('task', req.body.data);
    });
});
io.on('connection', function (socket) {
    var c = socket.decoded_token;
    if (c.db) {
        console.log(c.db);
        Machines.add(c.user, c.password, c.db, c.serial, socket);
        _.map(Auditors.forserial(c.serial), function (socketid) {
            io.to(socketid).emit('machine connection', { serial: c.serial });
        });
        socket.on('disconnect', function () {
            _.map(Auditors.forserial(c.serial), function (socketid) {
                io.to(socketid).emit('machine disconnection', { serial: c.serial });
            });
            Machines.remove(c.serial, socket.id);
        });
        socket.on('message', function (message) {
            Machines.pushdata(c.serial, 'message', message).then(function (docs) {
                _.map(Auditors.forserial(c.serial), function (socketid) {
                    io.to(socketid).emit('machine message', { serial: c.serial, data: message });
                });
            });
        });
        socket.on('data', function (data) {
            Machines.pushdata(c.serial, 'data', data).then(function (docs) {
                _.map(Auditors.forserial(c.serial), function (socketid) {
                    io.to(socketid).emit('machine data', { serial: c.serial, data: data });
                });
            });
        });
        socket.on('docs', function (docs) {
            Machines.pushdata(c.serial, 'docs', docs).then(function (docs) {
                _.map(Auditors.forserial(c.serial), function (socketid) {
                    io.to(socketid).emit('machine docs', { serial: c.serial, data: docs });
                });
            });
        });
        socket.on('up', function (datas) {
            _.map(Auditors.forserial(c.serial), function (socketid) {
                io.to(socketid).emit('machine up', { serial: c.serial });
            });
        });
    }
    else {
        Auditors.add(c.serial, socket.id);
        socket.on('disconnect', function () {
            Auditors.remove(socket.id);
        });
    }
    console.log('hello! ', socket.id);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbInNldHVwbXF0dCIsImF1dGhjb3VjaCIsImF1dGhvcml6ZXNvY2tldCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFDNUIsSUFBWSxPQUFPLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFDcEMsSUFBWSxVQUFVLFdBQU0sYUFBYSxDQUFDLENBQUE7QUFDMUMsSUFBWSxVQUFVLFdBQU0sYUFBYSxDQUFDLENBQUE7QUFDMUMsSUFBWSxFQUFFLFdBQU0sV0FBWSxDQUFDLENBQUE7QUFDakMsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsSUFBWSxHQUFHLFdBQU0sY0FBYyxDQUFDLENBQUE7QUFDcEMsSUFBWSxLQUFLLFdBQU0sT0FBTyxDQUFDLENBQUE7QUFFL0IsSUFBTyxhQUFhLFdBQVcsZUFBZSxDQUFDLENBQUM7QUFFaEQsSUFBTyxXQUFXLFdBQVcsdUJBQXVCLENBQUMsQ0FBQztBQUN0RCxJQUFPLFVBQVUsV0FBVyxzQkFBc0IsQ0FBQyxDQUFDO0FBRXBELElBQUksV0FBVyxHQUFLLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM1QyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUMxQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFHN0IsSUFBSSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFDcEIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFNcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUEsQ0FBQztJQUNuQyxNQUFNLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFB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QUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsVUFBUyxRQUFRO1FBQ3RELEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFBO0FBRUosQ0FBQyxDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDbkQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsVUFBUyxRQUFRO1FBQ3RELEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDbkQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsVUFBUyxRQUFRO1FBQ3RELEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDbEQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsVUFBUyxR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TSxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDO0lBQUMsSUFBSSxDQUFBLENBQUM7UUFDTCxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ2hDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFO1lBQ3RCLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIjtcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBwYXRoRXhpc3RzIGZyb20gXCJwYXRoLWV4aXN0c1wiO1xuaW1wb3J0ICogYXMgSU8gZnJvbSBcInNvY2tldC5pb1wiIDtcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCAqIGFzIGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XG5pbXBvcnQgKiBhcyByZWRpcyBmcm9tIFwicmVkaXNcIjtcblxuaW1wb3J0IGNvdWNoanNvbmNvbmYgPSByZXF1aXJlKFwiY291Y2hqc29uY29uZlwiKTtcblxuaW1wb3J0IG1hY2hDbGllbnRzID0gcmVxdWlyZShcIi4vbW9kdWxlcy9tYWNoQ2xpZW50c1wiKTtcbmltcG9ydCBhdWRDbGllbnRzID0gcmVxdWlyZShcIi4vbW9kdWxlcy9hdWRDbGllbnRzXCIpO1xuXG5sZXQgc29ja2V0aW9Kd3QgICA9IHJlcXVpcmUoXCJzb2NrZXRpby1qd3RcIik7XG5sZXQgcnBqID0gcmVxdWlyZSgncmVxdWVzdC1wcm9taXNlLWpzb24nKTtcbmxldCBtb3NjYSA9IHJlcXVpcmUoXCJtb3NjYVwiKTtcblxuXG5sZXQgYXBwID0gZXhwcmVzcygpO1xubGV0IHNlcnZlciA9IHJlcXVpcmUoJ2h0dHAnKS5TZXJ2ZXIoYXBwKTtcbmxldCBpbyA9IElPKHNlcnZlcik7XG5cblxuXG5cblxuaWYgKCFwYXRoRXhpc3RzLnN5bmMoJy4vY29uZi5qc29uJykpe1xuICB0aHJvdyBFcnJvcignbm8gY29uZmlndXJhdGlvbiBmb3VuZGVkJylcbn1cbmxldCBjb25mPXJlcXVpcmUoJy4vY29uZi5qc29uJylcblxubGV0IENPVUNIREI9IG5ldyBjb3VjaGpzb25jb25mKGNvbmYuY291Y2hkYilcblxubGV0IE1hY2hpbmVzPW5ldyBtYWNoQ2xpZW50cyhDT1VDSERCKTtcbmxldCBBdWRpdG9ycz1uZXcgYXVkQ2xpZW50cygpO1xuXG4vLyBwYXJzZSBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKVxuXG4vLyBwYXJzZSBhcHBsaWNhdGlvbi9qc29uXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKVxuXG5cblxuaW8udXNlKHNvY2tldGlvSnd0LmF1dGhvcml6ZSh7XG4gIHNlY3JldDogY29uZi5zZWNyZXQsXG4gIGhhbmRzaGFrZTogdHJ1ZVxufSkpO1xuXG5zZXJ2ZXIubGlzdGVuKGNvbmYucG9ydCk7XG5cblxubGV0IGFzY29sdGF0b3JlID0ge1xuICB0eXBlOiAncmVkaXMnLFxuICByZWRpczogcmVkaXMsXG4gIGRiOiAxMixcbiAgcG9ydDogNjM3OSxcbiAgcmV0dXJuX2J1ZmZlcnM6IHRydWUsIC8vIHRvIGhhbmRsZSBiaW5hcnkgcGF5bG9hZHNcbiAgaG9zdDogXCJsb2NhbGhvc3RcIlxufTtcblxubGV0IG1vc2NhU2V0dGluZ3MgPSB7XG4gIHBvcnQ6IDE4ODMsXG4gIGJhY2tlbmQ6IGFzY29sdGF0b3JlLFxuICBwZXJzaXN0ZW5jZToge1xuICAgIGZhY3Rvcnk6IG1vc2NhLnBlcnNpc3RlbmNlLlJlZGlzXG4gIH1cbn07XG5cblxubGV0IG1xdHRzZXJ2ZXIgPSBuZXcgbW9zY2EuU2VydmVyKG1vc2NhU2V0dGluZ3MpO1xubXF0dHNlcnZlci5vbigncmVhZHknLCBzZXR1cG1xdHQpO1xuXG5cbm1xdHRzZXJ2ZXIub24oJ2NsaWVudENvbm5lY3RlZCcsIGZ1bmN0aW9uKGNsaWVudCkge1xuICAgIGNvbnNvbGUubG9nKCdjbGllbnQgY29ubmVjdGVkJywgY2xpZW50LmlkKTsgICAgIFxufSk7XG5cbi8vIGZpcmVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkXG5tcXR0c2VydmVyLm9uKCdwdWJsaXNoZWQnLCBmdW5jdGlvbihwYWNrZXQsIGNsaWVudCkge1xuICBjb25zb2xlLmxvZygnUHVibGlzaGVkJywgcGFja2V0LnBheWxvYWQpO1xufSk7XG5cbi8vIGZpcmVkIHdoZW4gdGhlIG1xdHQgc2VydmVyIGlzIHJlYWR5XG5mdW5jdGlvbiBzZXR1cG1xdHQoKSB7XG4gIGNvbnNvbGUubG9nKCdNb3NjYSBzZXJ2ZXIgaXMgdXAgYW5kIHJ1bm5pbmcnKVxufVxuXG5cblxuaW50ZXJmYWNlIElTb2NrZXQge1xuXG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIGVtaXQ6RnVuY3Rpb247XG4gICAgICAgICAgICAgICAgb246RnVuY3Rpb247XG4gICAgZGVjb2RlZF90b2tlbjp7XG4gICAgICAgIGRiOnN0cmluZztcbiAgICAgICAgdXNlcjpzdHJpbmc7XG4gICAgICAgIHBhc3N3b3JkOnN0cmluZztcbiAgICAgICAgc2VyaWFsOnN0cmluZztcbiAgICB9XG59XG5cblxuXG5cbmFwcC5nZXQoJy8nLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgcmVzLmpzb24oe29ubGluZTp0cnVlfSlcbn0pO1xuXG5cblxuXG5mdW5jdGlvbiBhdXRoY291Y2godXNlcjpzdHJpbmcscGFzc3dvcmQ6c3RyaW5nLGRiOnN0cmluZyl7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7XG4gICAgcnBqLmdldChDT1VDSERCLmZvcih1c2VyLHBhc3N3b3JkLGRiKSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSh7c3VjY2Vzczp0cnVlfSlcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgcmVqZWN0KHtlcnJvcjond3JvbmcgY3JlZGVudGlhbHMnfSlcbiAgICB9KVxuICB9KVxufVxuXG5mdW5jdGlvbiBhdXRob3JpemVzb2NrZXQocHJvZmlsZSk6e317XG5yZXR1cm4gand0LnNpZ24ocHJvZmlsZSwgY29uZi5zZWNyZXQsIHsgZXhwaXJlc0luTWludXRlczogNjAqNSB9KTtcbn1cblxuYXBwLnBvc3QoJy9sb2dpbicsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICBhdXRoY291Y2gocmVxLmJvZHkudXNlcixyZXEuYm9keS5wYXNzd29yZCxyZXEuYm9keS5kYikudGhlbihmdW5jdGlvbigpe1xuXG4gIGxldCB0b2tlbj1hdXRob3JpemVzb2NrZXQoeyB1c2VyOnJlcS5ib2R5LnVzZXIscGFzc3dvcmQ6cmVxLmJvZHkucGFzc3dvcmQsZGI6cmVxLmJvZHkuZGIsc2VyaWFsOnJlcS5ib2R5LnNlcmlhbCB9KVxuXG4gICAgcmVzLmpzb24oe3N1Y2Nlc3M6dHJ1ZSx0b2tlbjp0b2tlbn0pXG4gIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgcmVzLmpzb24oZXJyKVxuICB9KVxufSk7XG5cbmFwcC5nZXQoJy9pcCcsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICByZXMuanNvbih7aXA6cmVxLmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzc30pXG59KTtcblxuYXBwLmdldCgnL3NvY2tldHMnLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgcmVzLmpzb24oTWFjaGluZXMuc29ja2V0cygpKVxufSk7XG5hcHAuZ2V0KCcvbWFjaGluZXMvOnNlcmlhbC9zb2NrZXRzJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gIHJlcy5qc29uKE1hY2hpbmVzLnNvY2tldHMocmVxLnBhcmFtcy5zZXJpYWwpKVxufSk7XG5hcHAuZ2V0KCcvbWFjaGluZXMnLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgcmVzLmpzb24oTWFjaGluZXMubGlzdCgpKVxufSk7XG5hcHAuZ2V0KCcvYXBwLzphcHAvbWFjaGluZXMnLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAvLyByZXMuanNvbihNYWNoaW5lcy5zZXJpYWxzKCkpXG59KTtcblxuYXBwLmdldCgnL21hY2hpbmVzLzpzZXJpYWwvbWVzc2FnZS86bWVzc2FnZScsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICBfLm1hcChNYWNoaW5lcy5pb3MocmVxLnBhcmFtcy5zZXJpYWwpLGZ1bmN0aW9uKHNvY2tldCl7XG4gICAgc29ja2V0LmVtaXQoJ21lc3NhZ2UnLCByZXEucGFyYW1zLm1lc3NhZ2UpO1xuXG4gIH0pXG4gIHJlcy5qc29uKHt9KVxuXG59KTtcblxuYXBwLnBvc3QoJy9tYWNoaW5lcy86c2VyaWFsL21lc3NhZ2UnLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgXy5tYXAoTWFjaGluZXMubGlzdChyZXEucGFyYW1zLnNlcmlhbCksZnVuY3Rpb24oc29ja2V0aWQpe1xuICAgIGlvLnRvKHNvY2tldGlkKS5lbWl0KCdtZXNzYWdlJywgcmVxLmJvZHkuZGF0YSk7XG4gIH0pXG5cbn0pO1xuYXBwLnBvc3QoJy9tYWNoaW5lcy86c2VyaWFsL2RhdGEnLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgXy5tYXAoTWFjaGluZXMubGlzdChyZXEucGFyYW1zLnNlcmlhbCksZnVuY3Rpb24oc29ja2V0aWQpe1xuICAgIGlvLnRvKHNvY2tldGlkKS5lbWl0KCdkYXRhJywgcmVxLmJvZHkuZGF0YSk7XG4gIH0pXG59KTtcbmFwcC5wb3N0KCcvbWFjaGluZXMvOnNlcmlhbC9leGVjJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gIF8ubWFwKE1hY2hpbmVzLmxpc3QocmVxLnBhcmFtcy5zZXJpYWwpLGZ1bmN0aW9uKHNvY2tldGlkKXtcbiAgICBpby50byhzb2NrZXRpZCkuZW1pdCgnZXhlYycsIHJlcS5ib2R5LmRhdGEpO1xuICB9KVxufSk7XG5hcHAucG9zdCgnL21hY2hpbmVzLzpzZXJpYWwvbnBtJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gIF8ubWFwKE1hY2hpbmVzLmxpc3QocmVxLnBhcmFtcy5zZXJpYWwpLGZ1bmN0aW9uKHNvY2tldGlkKXtcbiAgICBpby50byhzb2NrZXRpZCkuZW1pdCgnbnBtJywgcmVxLmJvZHkuZGF0YSk7XG4gIH0pXG59KTtcbmFwcC5wb3N0KCcvbWFjaGluZXMvOnNlcmlhbC90YXNrJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gIF8ubWFwKE1hY2hpbmVzLmxpc3QocmVxLnBhcmFtcy5zZXJpYWwpLGZ1bmN0aW9uKHNvY2tldGlkKXtcbiAgICBpby50byhzb2NrZXRpZCkuZW1pdCgndGFzaycsIHJlcS5ib2R5LmRhdGEpO1xuICB9KVxufSk7XG5cbmlvLm9uKCdjb25uZWN0aW9uJywgZnVuY3Rpb24gKHNvY2tldDpJU29ja2V0KSB7XG4gIGxldCBjID0gc29ja2V0LmRlY29kZWRfdG9rZW47XG5cbiAgaWYoYy5kYil7XG4gICAgY29uc29sZS5sb2coYy5kYilcblxuICAgIE1hY2hpbmVzLmFkZChjLnVzZXIsYy5wYXNzd29yZCxjLmRiLGMuc2VyaWFsLHNvY2tldCk7XG4gICAgXy5tYXAoQXVkaXRvcnMuZm9yc2VyaWFsKGMuc2VyaWFsKSxmdW5jdGlvbihzb2NrZXRpZCl7XG4gICAgICBpby50byhzb2NrZXRpZCkuZW1pdCgnbWFjaGluZSBjb25uZWN0aW9uJywge3NlcmlhbDpjLnNlcmlhbH0pO1xuICAgIH0pXG5cbiAgICBzb2NrZXQub24oJ2Rpc2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIF8ubWFwKEF1ZGl0b3JzLmZvcnNlcmlhbChjLnNlcmlhbCksZnVuY3Rpb24oc29ja2V0aWQpe1xuICAgICAgICBpby50byhzb2NrZXRpZCkuZW1pdCgnbWFjaGluZSBkaXNjb25uZWN0aW9uJywge3NlcmlhbDpjLnNlcmlhbH0pO1xuICAgICAgfSlcblxuICAgICAgTWFjaGluZXMucmVtb3ZlKGMuc2VyaWFsLHNvY2tldC5pZCk7XG4gICAgfSk7XG4gICAgc29ja2V0Lm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIE1hY2hpbmVzLnB1c2hkYXRhKGMuc2VyaWFsLCdtZXNzYWdlJyxtZXNzYWdlKS50aGVuKGZ1bmN0aW9uKGRvY3Mpe1xuXG4gICAgICAgIF8ubWFwKEF1ZGl0b3JzLmZvcnNlcmlhbChjLnNlcmlhbCksZnVuY3Rpb24oc29ja2V0aWQpe1xuICAgICAgICAgIGlvLnRvKHNvY2tldGlkKS5lbWl0KCdtYWNoaW5lIG1lc3NhZ2UnLCB7c2VyaWFsOmMuc2VyaWFsLGRhdGE6bWVzc2FnZX0pO1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KTtcbiAgICBzb2NrZXQub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgTWFjaGluZXMucHVzaGRhdGEoYy5zZXJpYWwsJ2RhdGEnLGRhdGEpLnRoZW4oZnVuY3Rpb24oZG9jcyl7XG5cbiAgICAgICAgXy5tYXAoQXVkaXRvcnMuZm9yc2VyaWFsKGMuc2VyaWFsKSxmdW5jdGlvbihzb2NrZXRpZCl7XG4gICAgICAgICAgaW8udG8oc29ja2V0aWQpLmVtaXQoJ21hY2hpbmUgZGF0YScsIHtzZXJpYWw6Yy5zZXJpYWwsZGF0YTpkYXRhfSk7XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHNvY2tldC5vbignZG9jcycsIGZ1bmN0aW9uIChkb2NzKSB7XG4gICAgICBNYWNoaW5lcy5wdXNoZGF0YShjLnNlcmlhbCwnZG9jcycsZG9jcykudGhlbihmdW5jdGlvbihkb2NzKXtcbiAgICAgICAgXy5tYXAoQXVkaXRvcnMuZm9yc2VyaWFsKGMuc2VyaWFsKSxmdW5jdGlvbihzb2NrZXRpZCl7XG4gICAgICAgICAgaW8udG8oc29ja2V0aWQpLmVtaXQoJ21hY2hpbmUgZG9jcycsIHtzZXJpYWw6Yy5zZXJpYWwsZGF0YTpkb2NzfSk7XG4gICAgICAgIH0pXG5cbiAgICAgIH0pXG4gICAgfSk7XG4gICAgc29ja2V0Lm9uKCd1cCcsIGZ1bmN0aW9uIChkYXRhcykge1xuICAgICAgXy5tYXAoQXVkaXRvcnMuZm9yc2VyaWFsKGMuc2VyaWFsKSxmdW5jdGlvbihzb2NrZXRpZCl7XG4gICAgICAgIGlvLnRvKHNvY2tldGlkKS5lbWl0KCdtYWNoaW5lIHVwJywge3NlcmlhbDpjLnNlcmlhbH0pO1xuICAgICAgfSlcbiAgICB9KVxuXG59IGVsc2V7XG4gIEF1ZGl0b3JzLmFkZChjLnNlcmlhbCxzb2NrZXQuaWQpXG4gIHNvY2tldC5vbignZGlzY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICBBdWRpdG9ycy5yZW1vdmUoc29ja2V0LmlkKVxuICB9KTtcblxufVxuXG5jb25zb2xlLmxvZygnaGVsbG8hICcsIHNvY2tldC5pZCk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

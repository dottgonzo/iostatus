var _ = require("lodash");
var rpj = require('request-promise-json');
module.exports = (function () {
    function AuClients() {
        this.all = [];
        this.forserial = function (serial) {
            var a = [];
            _.map(this.all, function (s) {
                _.map(s.serials, function (ss) {
                    if (ss == serial) {
                        a.push(s.id);
                    }
                });
            });
            return a;
        };
    }
    AuClients.prototype.add = function (serials, sid) {
        this.all.push({ id: sid, serials: serials });
    };
    ;
    AuClients.prototype.remove = function (sid) {
        var all = this.all;
        _.map(this.all, function (s) {
            if (s.id == sid) {
                _.pull(all, s);
            }
        });
    };
    ;
    return AuClients;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXVkQ2xpZW50cy50cyJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsImFkZCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFPMUMsaUJBQU87SUFBQTtRQUVIQSxRQUFHQSxHQUFZQSxFQUFFQSxDQUFDQTtRQWlCdEJBLGNBQVNBLEdBQUdBLFVBQVVBLE1BQU1BO1lBQzVCLElBQUksQ0FBQyxHQUFVLEVBQUUsQ0FBQztZQUNoQixDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUMsVUFBUyxDQUFVO2dCQUNoQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsVUFBUyxFQUFFO29CQUN6QixFQUFFLENBQUEsQ0FBQyxFQUFFLElBQUUsTUFBTSxDQUFDLENBQUEsQ0FBQzt3QkFDYixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtvQkFDZCxDQUFDO2dCQUNILENBQUMsQ0FBQyxDQUFBO1lBQ0osQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsQ0FBQyxDQUFBO1FBQ1YsQ0FBQyxDQUFDQTtJQUNGQSxDQUFDQTtJQXpCRCx1QkFBRyxHQUFILFVBQUksT0FBZ0IsRUFBQyxHQUFVO1FBQzdCQyxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFDQSxFQUFFQSxFQUFDQSxHQUFHQSxFQUFDQSxPQUFPQSxFQUFDQSxPQUFPQSxFQUFDQSxDQUFDQSxDQUFBQTtJQUV6Q0EsQ0FBQ0E7O0lBQ0QsMEJBQU0sR0FBTixVQUFPLEdBQUc7UUFDTkMsSUFBSUEsR0FBR0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDbkJBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEVBQUNBLFVBQVNBLENBQVVBO1lBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUUsR0FBRyxDQUFDLENBQUEsQ0FBQztnQkFDYixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQTtZQUNmLENBQUM7UUFDSCxDQUFDLENBQUNBLENBQUFBO0lBRUpBLENBQUNBOztJQWFELGdCQUFDO0FBQUQsQ0E5Qk8sQUE4Qk4sR0FBQSxDQUFBIiwiZmlsZSI6Im1vZHVsZXMvYXVkQ2xpZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIjtcbmxldCBycGogPSByZXF1aXJlKCdyZXF1ZXN0LXByb21pc2UtanNvbicpO1xuXG5pbnRlcmZhY2UgSUNsaWVudHN7XG4gICAgaWQ6c3RyaW5nO1xuICAgIHNlcmlhbHM6c3RyaW5nW107XG59XG5cbmV4cG9ydD1jbGFzcyBBdUNsaWVudHMge1xuICAgIFxuICAgIGFsbDpJQ2xpZW50c1tdPVtdO1xuICAgIFxuXG5hZGQoc2VyaWFsczpzdHJpbmdbXSxzaWQ6c3RyaW5nKTp2b2lkIHtcbiAgdGhpcy5hbGwucHVzaCh7aWQ6c2lkLHNlcmlhbHM6c2VyaWFsc30pXG5cbn07XG5yZW1vdmUoc2lkKTp2b2lkIHtcbiAgICBsZXQgYWxsPXRoaXMuYWxsO1xuICBfLm1hcCh0aGlzLmFsbCxmdW5jdGlvbihzOklDbGllbnRzKXtcbiAgICBpZiAocy5pZD09c2lkKXtcbiAgICAgIF8ucHVsbChhbGwscylcbiAgICB9XG4gIH0pXG5cbn07XG5cbmZvcnNlcmlhbCA9IGZ1bmN0aW9uIChzZXJpYWwpOnN0cmluZ1tdIHtcbmxldCBhOnN0cmluZ1tdPVtdO1xuICBfLm1hcCh0aGlzLmFsbCxmdW5jdGlvbihzOklDbGllbnRzKXtcbiAgICBfLm1hcChzLnNlcmlhbHMsZnVuY3Rpb24oc3Mpe1xuICAgICAgaWYoc3M9PXNlcmlhbCl7XG4gICAgICAgIGEucHVzaChzLmlkKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG4gIHJldHVybiBhXG59O1xufVxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

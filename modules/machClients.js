var _ = require("lodash");
var Promise = require("bluebird");
var rpj = require('request-promise-json');
function mconnection(user, password, db, serial, bool) {
    return new Promise(function (resolve, reject) {
        rpj.get(db + '/connection_' + serial).then(function (doc) {
            doc.connected = bool;
            doc.updatedAt = new Date().getTime();
            rpj.put(db + '/connection_' + serial, doc).then(function (d) {
                resolve(true);
            }).catch(function (err) {
                console.log(err);
                reject(err);
            });
        }).catch(function (err) {
            console.log(err);
            if (bool == true && err.statusCode == 404) {
                var doc = {
                    _id: 'connection_' + serial,
                    connected: true,
                    updatedAt: new Date().getTime()
                };
                rpj.post(db, doc).then(function (doc) {
                    resolve(true);
                }).catch(function (err) {
                    reject({ error: 'wrong credentials' });
                });
            }
            else {
                console.log(err);
                reject(err);
            }
        });
    });
}
function pushtodb(user, password, db, serial, doc) {
    return new Promise(function (resolve, reject) {
        rpj.get(db + '/' + doc._id).then(function (d) {
            doc._rev = d._rev;
            rpj.put(db + '/' + doc._id, doc).then(function () {
                resolve(doc);
            }).catch(function (err) {
                reject(err);
            });
        }).catch(function (err) {
            if (err.statusCode == 404) {
                rpj.post(db + '/', doc).then(function () {
                    resolve(doc);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else {
                console.log(err);
                reject(err);
            }
        });
    });
}
function exists(all, serial, sid) {
    var serialexists = false;
    var socketexists = false;
    _.map(all, function (client) {
        if (client.serial) {
            serialexists = true;
            _.map(client.sockets, function (s) {
                if (s.id == sid) {
                    socketexists = true;
                }
            });
        }
    });
    return { serial: serialexists, socket: socketexists };
}
module.exports = (function () {
    function MaClients(db) {
        this.couchdb = db;
        this.all = [];
    }
    MaClients.prototype.add = function (user, password, db, serial, socket) {
        var exist = exists(this.all, serial, socket.id);
        if (!exist.serial) {
            this.all.push({
                serial: serial,
                user: user,
                password: password,
                db: this.couchdb.protocol + '://' + user + ':' + password + '@' + this.couchdb.host + '/' + db,
                sockets: [{ id: socket.id, socket: socket }]
            });
            return mconnection(user, password, this.couchdb.protocol + '://' + user + ':' + password + '@' + this.couchdb.host + '/' + db, serial, true);
        }
        else if (!exist.socket) {
            _.map(this.all, function (client) {
                if (client.serial) {
                    client.sockets.push({ id: socket.id, socket: socket });
                }
            });
            console.log('new socket for ' + serial);
        }
    };
    ;
    MaClients.prototype.pushdata = function (serial, type, data) {
        return new Promise(function (resolve, reject) {
            reject('todo');
        });
    };
    ;
    MaClients.prototype.remove = function (serial, sid) {
        var remaning;
        for (var soc = 0; soc < this.all.length; soc++) {
            var client = this.all[soc];
            if (client.serial == serial) {
                if (client.sockets.length == 1 && client.sockets[0].id == sid) {
                    mconnection(client.user, client.password, client.db, client.serial, false).then(function () {
                        console.log('switched offline');
                    }).catch(function (err) {
                        console.log('switched offline error');
                        console.log(err);
                    });
                    _.map(this.all, function (el) {
                        if (el.serial != client.serial) {
                            remaning.push(el);
                        }
                    });
                    this.all = remaning;
                }
                else {
                    console.log('todo');
                }
            }
        }
    };
    ;
    MaClients.prototype.list = function (serial) {
        var serials;
        if (serial) {
            _.map(this.all, function (client) {
                if (client.serial == serial) {
                    serials.push(client.serial);
                }
            });
        }
        else {
            _.map(this.all, function (client) {
                serials.push(client.serial);
            });
        }
        return serials;
    };
    ;
    MaClients.prototype.ios = function (serial) {
        var sockets;
        if (serial) {
            _.map(this.all, function (client) {
                if (client.serial == serial) {
                    _.map(client.sockets, function (s) {
                        sockets.push(s.socket);
                    });
                }
            });
        }
        else {
            _.map(this.all, function (client) {
                _.map(client.sockets, function (s) {
                    sockets.push(s.socket);
                });
            });
        }
        return sockets;
    };
    ;
    MaClients.prototype.sockets = function (serial) {
        var ids;
        if (serial) {
            _.map(this.all, function (client) {
                if (client.serial == serial) {
                    ids = _.pluck(client.sockets, "id");
                }
            });
            return ids;
        }
        else {
            ids = [];
            _.map(this.all, function (client) {
                _.map(client.sockets, function (s) {
                    ids.push(s.id);
                });
            });
            return ids;
        }
    };
    ;
    return MaClients;
})();

//# sourceMappingURL=data:application/json;base64,
